import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { searchMovies } from './movieAPI';

export interface MovieState {
  value: any;
  status: 'idle' | 'loading' | 'failed';
  history: string[];
}

const initialState: MovieState = {
  value: {},
  status: 'idle',
  history: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchMovieAsync = createAsyncThunk(
  'movie/searchMovie',
  async (query?: string) => {
    const response = await searchMovies(query);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const movieSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: { 
     
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchMovieAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(searchMovieAsync.fulfilled, (state, action) => {
        state.status = 'idle'; 
        state.history.push(action.meta.arg!) 
        state.value = action.payload;
      })
      .addCase(searchMovieAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});
 
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectMovies = (state: RootState) => { 
  return state.movie.value.results;
}

export const selectHistory = (state: RootState) => { 
  return state.movie.history;
}

 
export default movieSlice.reducer;
